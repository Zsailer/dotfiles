aliases['dev'] = 'cd ~/Documents/Work/dev'
aliases['work'] = 'cd ~/Documents/Work'

# Create aliases to all projects in develop folder
import pathlib

home = pathlib.Path.home()
devdir = home / 'Documents' / 'Work' / 'dev'
directories = devdir.glob("*")
for dir in directories:
    if dir.is_dir():
        name = dir.stem
        aliases[f'dev-{name}'] = f'cd {str(dir.resolve())}'

# Setting some environment variables
# When tab completing, require to hit enter twice.
$COMPLETIONS_CONFIRM=True
$XONSH_COLOR_STYLE='vs'
$PYTHONBREAKPOINT='ipdb.set_trace'
$XONSH_SHOW_TRACEBACK = True

# Set Git status PROMPT
$XONSH_GITSTATUS_BRANCH="{#fdff00}"
$XONSH_GITSTATUS_OPERATION="{#fdff00}"

# Let's build the PROMPT
prefix="{WHITE}⚡︎"
prefix+="{#fdff00}>{#988829}>{#505c7c}>"
$PROMPT_FIELDS["PREFIX"]=prefix
$PROMPT_FIELDS["env_prefix"]=""
$PROMPT_FIELDS["env_postfix"]=""

# Handle Git portion of the prompt.
from xonsh.prompt.gitstatus import gitstatus

def gitinfo():
    try:
        git = gitstatus()
        gitinfo = ""
        if git.branch:
            gitinfo += " ({{#505c7c}}branch {{NO_COLOR}}⑂ {{#fdff00}}{branch}{{NO_COLOR}})".format(branch=git.branch)
        return gitinfo
    except:
        return ""

$PROMPT_FIELDS["gitinfo"]=gitinfo


$PROMPT="({#505c7c}conda {NO_COLOR}⚛︎ {#fdff00}{env_name}{NO_COLOR}) ⚓︎{#505c7c}{user} {NO_COLOR}in {#988829}{short_cwd}/{WHITE}{gitinfo}{NO_COLOR}↩︎\n {WHITE}{PREFIX} "

# Appedning some paths
$PATH.append("/Users/zsailer/repos/PhyML-3.1/bin")
$PATH.append("/Users/zsailer/repos/paml4.8/bin")

# added by Miniconda3 installer
$PATH.append("/Users/zsailer/miniconda3/bin")  # commented out by conda initialize

# Add VSCode
$PATH.append("/Applications/Visual Studio Code.app/Contents/Resources/app/bin")

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
import sys as _sys
from types import ModuleType as _ModuleType
_mod = _ModuleType("xontrib.conda",
                   "Autogenerated from $(/Users/zsailer/miniconda3/bin/conda shell.xonsh hook)")
__xonsh__.execer.exec($("/Users/zsailer/miniconda3/bin/conda" "shell.xonsh" "hook"),
                      glbs=_mod.__dict__,
                      filename="$(/Users/zsailer/miniconda3/bin/conda shell.xonsh hook)")
_sys.modules["xontrib.conda"] = _mod
del _sys, _mod, _ModuleType
# <<< conda initialize <<<

